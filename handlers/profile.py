from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from keyboards.main_menu import main_menu_keyboard
from keyboards.profile_menu import profile_menu_keyboard
from utils.storage import load_users, save_user, load_topics
from states import Form
import logging

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "name"
@router.message(Form.name)
async def process_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.set_state(Form.work_place)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã
    await message.answer("–ì–¥–µ –∏ –∫–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "work_place"
@router.message(Form.work_place)
async def process_work_place(message: Message, state: FSMContext) -> None:
    await state.update_data(work_place=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
    await state.set_state(Form.work_description)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Ä–∞–±–æ—Ç–µ
    await message.answer("–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –ø–æ —Ä–∞–±–æ—Ç–µ?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "work_description"
@router.message(Form.work_description)
async def process_work_description(message: Message, state: FSMContext) -> None:
    await state.update_data(work_description=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    await state.set_state(Form.hobbies)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Ö–æ–±–±–∏
    await message.answer("–ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "hobbies"
@router.message(Form.hobbies)
async def process_hobbies(message: Message, state: FSMContext):
    await state.update_data(hobbies=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ–±–±–∏
    topics = load_topics()

    if topics:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=topic)] for topic in topics],
            resize_keyboard=True
        )
        await message.answer("–ö–∞–∫–∞—è —Ç–µ–º–∞ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ?", reply_markup=keyboard)
        await state.set_state(Form.topic)
    else:
        await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=main_menu_keyboard)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "topic"
@router.message(Form.topic)
async def process_topic(message: Message, state: FSMContext):
    topics = load_topics()
    selected_topic = message.text

    if selected_topic in topics:
        await state.update_data(topic=selected_topic)
        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_data = {
            'name': data['name'],
            'work_place': data['work_place'],  # –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
            'work_description': data['work_description'],  # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            'hobbies': data['hobbies'],  # –•–æ–±–±–∏
            'topic': selected_topic,
            'username': message.from_user.username,
            'status': 'active'
        }
        save_user(str(user_id), user_data)

        await message.answer("–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"
@router.message(F.text == "üìÑ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def show_my_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users = load_users()

    if str(user_id) in users:
        user_data = users[str(user_id)]
        profile_text = (
            f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
            f"–ò–º—è: {user_data['name']}\n"
            f"–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {user_data['work_place']}\n"
            f"–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è: {user_data['work_description']}\n"
            f"–•–æ–±–±–∏: {user_data['hobbies']}\n"
            f"–¢–µ–º–∞: {user_data.get('topic', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}"
        )
        await message.answer(profile_text, reply_markup=profile_menu_keyboard)
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "name"
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def edit_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users = load_users()

    if str(user_id) in users:
        user_data = users[str(user_id)]
        await state.update_data(
            name=user_data['name'],
            work_place=user_data['work_place'],  # –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
            work_description=user_data['work_description'],  # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            hobbies=user_data['hobbies']  # –•–æ–±–±–∏
        )
        await message.answer("–î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "name"
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.name)
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")