from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from keyboards.main_menu import main_menu_keyboard
from keyboards.profile_menu import profile_menu_keyboard
from utils.storage import load_users, save_user, load_topics, save_user_topic  # –î–æ–±–∞–≤–∏–ª–∏ save_user_topic
from states import Form
import logging
from aiogram.fsm.context import FSMContext  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º router
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "name"
@router.message(Form.name)
async def process_name(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.set_state(Form.work_place)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã
    await message.answer("–ì–¥–µ –∏ –∫–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "work_place"
@router.message(Form.work_place)
async def process_work_place(message: Message, state: FSMContext) -> None:
    await state.update_data(work_place=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
    await state.set_state(Form.work_description)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Ä–∞–±–æ—Ç–µ
    await message.answer("–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –ø–æ —Ä–∞–±–æ—Ç–µ?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "work_description"
@router.message(Form.work_description)
async def process_work_description(message: Message, state: FSMContext) -> None:
    await state.update_data(work_description=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    await state.set_state(Form.hobbies)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Ö–æ–±–±–∏
    await message.answer("–ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "hobbies"
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è hobbies
@router.message(Form.hobbies)
async def process_hobbies(message: Message, state: FSMContext):
    await state.update_data(hobbies=message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ —á–ª–µ–Ω—Å—Ç–≤–µ
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
        ],
        resize_keyboard=True
    )

    await message.answer("–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã —á–ª–µ–Ω–æ–º –∫–ª—É–±–∞ –§–£–ë?", reply_markup=keyboard)
    await state.set_state(Form.is_fub_member)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è is_fub_member
@router.message(Form.is_fub_member)
async def process_is_fub_member(message: Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return

    await state.update_data(is_fub_member=message.text)

    if message.text == "–î–∞":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à fubid", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.fub_id)
    else:
        # –ï—Å–ª–∏ –Ω–µ —á–ª–µ–Ω –∫–ª—É–±–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö
        data = await state.get_data()
        await save_user_data(message, data)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è fub_id
@router.message(Form.fub_id)
async def process_fub_id(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
        return

    await state.update_data(fub_id=message.text)
    data = await state.get_data()
    await save_user_data(message, data)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
    await state.clear()


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def save_user_data(message: Message, data: dict):
    user_id = message.from_user.id
    user_data = {
        'name': data['name'],
        'work_place': data['work_place'],
        'work_description': data['work_description'],
        'hobbies': data['hobbies'],
        'is_fub_member': data.get('is_fub_member', '–ù–µ—Ç'),
        'fub_id': data.get('fub_id'),
        'username': message.from_user.username,
        'status': 'active'
    }
    save_user(str(user_id), user_data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"
@router.message(F.text == "üìÑ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def show_my_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users = load_users()

    if str(user_id) in users:
        user_data = users[str(user_id)]
        profile_text = (
            f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
            f"–ò–º—è: {user_data['name']}\n"
            f"–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {user_data['work_place']}\n"
            f"–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è: {user_data['work_description']}\n"
            f"–•–æ–±–±–∏: {user_data['hobbies']}\n"
            f"–ß–ª–µ–Ω –∫–ª—É–±–∞ –§–£–ë: {user_data.get('is_fub_member', '–ù–µ—Ç')}\n"
        )

        if user_data.get('is_fub_member') == '–î–∞':
            profile_text += f"FUB ID: {user_data.get('fub_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"

        if user_data.get('topic'):
            profile_text += f"–¢–µ–º–∞: {user_data['topic']}\n"

        await message.answer(profile_text, reply_markup=profile_menu_keyboard)
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.name)
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def edit_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users = load_users()

    if str(user_id) in users:
        user_data = users[str(user_id)]
        await state.update_data(
            name=user_data['name'],
            work_place=user_data['work_place'],
            work_description=user_data['work_description'],
            hobbies=user_data['hobbies']
        )
        await message.answer("–î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "name"
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.name)
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@router.callback_query(F.data.startswith("select_topic:"))
async def process_topic_selection(callback: CallbackQuery, state: FSMContext):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
    topic = callback.data.split(":")[1].replace('_', ' ')  # –ó–∞–º–µ–Ω—è–µ–º "_" –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    user_id = str(callback.from_user.id)
    users = load_users()

    if user_id in users:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = users[user_id]
        user_data['topic'] = topic  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
        save_user(user_id, user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_user_topic(user_id, topic)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {topic}.",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        )
        await callback.answer()
    else:
        await callback.message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.")
        await callback.answer()