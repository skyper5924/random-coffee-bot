import random
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from config import ADMIN_ID
from keyboards.admin_menu import admin_menu_keyboard
from keyboards.main_menu import main_menu_keyboard
from utils.matching_tasks import weekly_matching
from utils.storage import load_users, save_topic, load_topics, delete_topic
from states import BroadcastState
from aiogram.fsm.state import State, StatesGroup
import logging
import asyncio
from keyboards.inline import create_topic_keyboard

class AdminStates(StatesGroup):
    add_topic = State()
    delete_topic = State()
    set_matching_day = State()
    set_matching_time = State()
    confirm_topic_selection = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏


router = Router()

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é")
async def admin_menu(message: Message):
    if is_admin(message.from_user.id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é!", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

@router.message(F.text == "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def show_participants_count(message: Message):
    if is_admin(message.from_user.id):
        users = load_users()
        topics = load_topics()

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        total_users = len(users)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        active_users = sum(1 for user in users.values() if user.get('status') == 'active')
        inactive_users = total_users - active_users

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ç–µ–º–∞–º
        topics_count = {topic: 0 for topic in topics}
        users_without_topic = 0

        for user in users.values():
            if user.get('topic'):
                topics_count[user['topic']] += 1
            else:
                users_without_topic += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
            f"üë§ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_users}\n"
            f"üè∑Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ç–µ–º–∞–º:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
        for topic, count in topics_count.items():
            stats_text += f"  - {topic}: {count}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ —Ç–µ–º—ã
        stats_text += f"üö´ –ë–µ–∑ —Ç–µ–º—ã: {users_without_topic}\n"

        await message.answer(stats_text, reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º")
async def broadcast_message(message: Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(BroadcastState.broadcast_message)
        logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BroadcastState.broadcast_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text, BroadcastState.broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ BroadcastState.broadcast_message: {message.text}")
    users = load_users()
    success_count = 0
    fail_count = 0

    try:
        for user_id_str in users.keys():
            try:
                user_id = int(user_id_str)
                await message.send_copy(chat_id=user_id)
                success_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
                fail_count += 1

        await message.answer(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
            reply_markup=admin_menu_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=admin_menu_keyboard)
    finally:
        await state.clear()
        logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏")
async def manage_topics(message: Message):
    if is_admin(message.from_user.id):
        topics = load_topics()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É")],
                [KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É")],
                [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )

        if topics:
            await message.answer(
                "–¢–µ–∫—É—â–∏–µ —Ç–µ–º—ã:\n" + "\n".join(topics),
                reply_markup=keyboard
            )
        else:
            await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É.", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É")
async def add_topic(message: Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(AdminStates.add_topic)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(AdminStates.add_topic)
async def process_add_topic(message: Message, state: FSMContext):
    topics = load_topics()
    new_topic = message.text

    if new_topic not in topics:
        save_topic(new_topic)
        await message.answer(f"–¢–µ–º–∞ '{new_topic}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–¢–∞–∫–∞—è —Ç–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=admin_menu_keyboard)

    await state.clear()

@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É")
async def delete_topic_handler(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã.")
    if is_admin(message.from_user.id):
        topics = load_topics()
        if topics:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=topic)] for topic in topics],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
            await state.set_state(AdminStates.delete_topic)
        else:
            await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text, AdminStates.delete_topic)
async def process_delete_topic(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {message.text}")
    topics = load_topics()
    topic_to_delete = message.text

    if topic_to_delete in topics:
        delete_topic(topic_to_delete)
        await message.answer(f"–¢–µ–º–∞ '{topic_to_delete}' —É–¥–∞–ª–µ–Ω–∞.", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admin_menu_keyboard)

    await state.clear()

@router.message(F.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã")
async def view_all_profiles(message: Message):
    if is_admin(message.from_user.id):
        users = load_users()

        if not users:
            await message.answer("–ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=admin_menu_keyboard)
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –∞–Ω–∫–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 5 —à—Ç—É–∫
        users_list = list(users.items())
        chunk_size = 5
        chunks = [users_list[i:i + chunk_size] for i in range(0, len(users_list), chunk_size)]

        for chunk in chunks:
            profiles_text = "–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç:\n\n"
            for user_id, user_data in chunk:
                profile_text = (
                    f"üë§ –ò–º—è: {user_data['name']}\n"
                    f"üíº –†–∞–±–æ—Ç–∞: {user_data['work_place']}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: {user_data['work_description']}\n"
                    f"üéØ –•–æ–±–±–∏: {user_data['hobbies']}\n"
                    f"üè∑Ô∏è –¢–µ–º–∞: {user_data.get('topic', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}\n"
                    f"üîó Username: @{user_data.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user_data.get('status', 'active') == 'active' else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n"
                    f"---\n"
                )
                profiles_text += profile_text

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∞–Ω–∫–µ—Ç
            await message.answer(profiles_text, reply_markup=admin_menu_keyboard)

    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text == "üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä –ø–∞—Ä")
async def manual_matching(message: Message, bot: Bot):
    if is_admin(message.from_user.id):
        await message.answer("–ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä...", reply_markup=ReplyKeyboardRemove())
        pairs = await weekly_matching(bot)
        await message.answer(
            f"–ü–æ–¥–±–æ—Ä –ø–∞—Ä –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {len(pairs)}.",
            reply_markup=admin_menu_keyboard
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text == "üì© –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º")
async def start_topic_selection(message: Message, state: FSMContext):
    if is_admin(message.from_user.id):
        topics = load_topics()
        if topics:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏")],
                    [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")]
                ],
                resize_keyboard=True
            )
            await message.answer(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n" + "\n".join(topics),
                reply_markup=keyboard
            )
            await state.set_state(AdminStates.confirm_topic_selection)
        else:
            await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—ã.", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)
@router.message(F.text == "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏", AdminStates.confirm_topic_selection)
async def manage_topics_from_selection(message: Message, state: FSMContext):
    await manage_topics(message)

@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", AdminStates.confirm_topic_selection)
async def confirm_topic_selection(message: Message, state: FSMContext, bot: Bot):
    users = load_users()
    active_users = {user_id: user_data for user_id, user_data in users.items() if user_data.get('status') == 'active'}
    topics = load_topics()

    if not topics:
        await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—ã.", reply_markup=admin_menu_keyboard)
        return

    for user_id in active_users:
        try:
            await bot.send_message(
                chat_id=user_id,
                text="üåü –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–π –≤—Å—Ç—Ä–µ—á–∏!\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –±–ª–∏–∂–µ –≤—Å–µ–≥–æ, –∏ –º—ã –ø–æ–¥–±–µ—Ä—ë–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—É—é –ø–∞—Ä—É.",
                reply_markup=create_topic_keyboard(topics)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=admin_menu_keyboard)
    await state.clear()


@router.message(F.text == "ü§ù –ü–æ–¥–±–æ—Ä –ø–∞—Ä –§–£–ë –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
async def match_fub_pairs(message: Message, bot: Bot):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)
        return

    await message.answer("–ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä –§–£–ë ‚Üî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å...", reply_markup=ReplyKeyboardRemove())

    users = load_users()
    fub_members = {uid: data for uid, data in users.items()
                   if data.get('is_fub_member') == '–î–∞' and data.get('status') == 'active'}
    non_fub_members = {uid: data for uid, data in users.items()
                       if data.get('is_fub_member') != '–î–∞' and data.get('status') == 'active'}

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
    fub_ids = list(fub_members.keys())
    non_fub_ids = list(non_fub_members.keys())
    random.shuffle(fub_ids)
    random.shuffle(non_fub_ids)

    pairs = []
    min_pairs = min(len(fub_ids), len(non_fub_ids))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã
    for i in range(min_pairs):
        pairs.append((fub_ids[i], non_fub_ids[i]))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success_count = 0
    for fub_id, non_fub_id in pairs:
        try:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —á–ª–µ–Ω—É –§–£–ë
            await bot.send_message(
                chat_id=fub_id,
                text=f"üéâ –í–∞—à–∞ –ø–∞—Ä–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {non_fub_members[non_fub_id]['name']}!\n"
                     f"üíº –†–∞–±–æ—Ç–∞: {non_fub_members[non_fub_id].get('work_place', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: {non_fub_members[non_fub_id].get('work_description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"üéØ –•–æ–±–±–∏: {non_fub_members[non_fub_id].get('hobbies', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É: @{non_fub_members[non_fub_id].get('username', 'username_–Ω–µ_—É–∫–∞–∑–∞–Ω')}\n"
                     f"–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ!"
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —á–ª–µ–Ω—É –§–£–ë
            await bot.send_message(
                chat_id=non_fub_id,
                text=f"üéâ –í–∞—à–∞ –ø–∞—Ä–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {fub_members[fub_id]['name']} (—á–ª–µ–Ω –∫–ª—É–±–∞ –§–£–ë)!\n"
                     f"üíº –†–∞–±–æ—Ç–∞: {fub_members[fub_id].get('work_place', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: {fub_members[fub_id].get('work_description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"üéØ –•–æ–±–±–∏: {fub_members[fub_id].get('hobbies', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                     f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É: @{fub_members[fub_id].get('username', 'username_–Ω–µ_—É–∫–∞–∑–∞–Ω')}\n"
                     f"–î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ!"
            )
            success_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–µ–∑ –ø–∞—Ä—ã
    leftover_fub = len(fub_ids) - min_pairs
    leftover_non_fub = len(non_fub_ids) - min_pairs

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–ª–µ–Ω–æ–≤ –§–£–ë –±–µ–∑ –ø–∞—Ä—ã
    if leftover_fub > 0:
        for i in range(min_pairs, len(fub_ids)):
            try:
                await bot.send_message(
                    chat_id=fub_ids[i],
                    text="üòî –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞–º –ø–∞—Ä—É. –ü–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–µ —á–ª–µ–Ω–æ–≤ –§–£–ë –±–µ–∑ –ø–∞—Ä—ã
    if leftover_non_fub > 0:
        for i in range(min_pairs, len(non_fub_ids)):
            try:
                await bot.send_message(
                    chat_id=non_fub_ids[i],
                    text="üòî –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞–º –ø–∞—Ä—É. –ü–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    report = (
        f"–ü–æ–¥–±–æ—Ä –ø–∞—Ä –§–£–ë ‚Üî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω:\n"
        f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –ø–∞—Ä: {success_count}\n"
        f"–ß–ª–µ–Ω–æ–≤ –§–£–ë –±–µ–∑ –ø–∞—Ä—ã: {leftover_fub}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–∞—Ä—ã: {leftover_non_fub}"
    )

    await message.answer(report, reply_markup=admin_menu_keyboard)
    logging.info(report)