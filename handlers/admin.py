from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from config import ADMIN_ID
from keyboards.admin_menu import admin_menu_keyboard
from keyboards.main_menu import main_menu_keyboard
from utils.matching_tasks import weekly_matching
from utils.storage import load_users, save_topics, load_topics
from states import BroadcastState
from aiogram.fsm.state import State, StatesGroup
import logging
import asyncio

class AdminStates(StatesGroup):
    add_topic = State()
    delete_topic = State()
    set_matching_day = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω—è
    set_matching_time = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏

router = Router()

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é")
async def admin_menu(message: Message):
    if is_admin(message.from_user.id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é!", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

@router.message(F.text == "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def show_participants_count(message: Message):
    if is_admin(message.from_user.id):
        users = load_users()
        count = len(users)
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º")
async def broadcast_message(message: Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(BroadcastState.broadcast_message)
        logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: BroadcastState.broadcast_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text, BroadcastState.broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ BroadcastState.broadcast_message: {message.text}")
    users = load_users()
    success_count = 0
    fail_count = 0

    try:
        for user_id_str in users.keys():
            try:
                user_id = int(user_id_str)
                await message.send_copy(chat_id=user_id)
                success_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
                fail_count += 1

        await message.answer(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
            reply_markup=admin_menu_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=admin_menu_keyboard)
    finally:
        await state.clear()
        logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏")
async def manage_topics(message: Message):
    if is_admin(message.from_user.id):
        topics = load_topics()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É")],
                [KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É")],
                [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )

        if topics:
            await message.answer(
                "–¢–µ–∫—É—â–∏–µ —Ç–µ–º—ã:\n" + "\n".join(topics),
                reply_markup=keyboard
            )
        else:
            await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É.", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É")
async def add_topic(message: Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(AdminStates.add_topic)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(AdminStates.add_topic)
async def process_add_topic(message: Message, state: FSMContext):
    topics = load_topics()
    new_topic = message.text

    if new_topic not in topics:
        topics.append(new_topic)
        save_topics(topics)
        await message.answer(f"–¢–µ–º–∞ '{new_topic}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–¢–∞–∫–∞—è —Ç–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=admin_menu_keyboard)

    await state.clear()

@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É")
async def delete_topic(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã.")
    if is_admin(message.from_user.id):
        topics = load_topics()
        if topics:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=topic)] for topic in topics],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
            await state.set_state(AdminStates.delete_topic)
        else:
            await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)

@router.message(F.text, AdminStates.delete_topic)
async def process_delete_topic(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {message.text}")
    topics = load_topics()
    topic_to_delete = message.text

    if topic_to_delete in topics:
        topics.remove(topic_to_delete)
        save_topics(topics)
        await message.answer(f"–¢–µ–º–∞ '{topic_to_delete}' —É–¥–∞–ª–µ–Ω–∞.", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admin_menu_keyboard)

    await state.clear()

@router.message(F.text == "üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä –ø–∞—Ä")
async def manual_matching(message: Message, bot: Bot):
    if is_admin(message.from_user.id):
        await message.answer("–ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä...", reply_markup=ReplyKeyboardRemove())
        await weekly_matching(bot)  # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu_keyboard)