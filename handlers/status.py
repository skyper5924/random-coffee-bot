from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from utils.storage import load_users, save_user
from keyboards.main_menu import main_menu_keyboard

router = Router()

@router.message(F.text == "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def show_my_status(message: Message):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id in users:
        current_status = users[user_id].get('status', 'active')
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if current_status == 'active' else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –°—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")],
                [KeyboardButton(text="‚ùå –°—Ç–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º")],
                [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )

        await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}.", reply_markup=keyboard)
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.", reply_markup=main_menu_keyboard)

@router.message(F.text == "‚úÖ –°—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")
async def set_active_status(message: Message):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id in users:
        user_data = users[user_id]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['status'] = 'active'  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π
        save_user(user_id, user_data)  # –ü–µ—Ä–µ–¥–∞—ë–º user_id –∏ user_data
        await message.answer("–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ê–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu_keyboard)
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.", reply_markup=main_menu_keyboard)

@router.message(F.text == "‚ùå –°—Ç–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º")
async def set_inactive_status(message: Message):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id in users:
        user_data = users[user_id]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['status'] = 'inactive'  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        save_user(user_id, user_data)  # –ü–µ—Ä–µ–¥–∞—ë–º user_id –∏ user_data
        await message.answer("–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ù–µ –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=main_menu_keyboard)
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.", reply_markup=main_menu_keyboard)